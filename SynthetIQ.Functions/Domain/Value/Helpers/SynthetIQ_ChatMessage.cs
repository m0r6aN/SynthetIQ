namespace SynthetIQ.Functions.Domain.Value.Helpers
{
    using System.ComponentModel.DataAnnotations;
    using System.Text.Json.Serialization;

    public sealed class SynthetIQ_ChatMessage
    {
        // Summary: The role of the author of this message. One of system, user, or assistant.
        [JsonPropertyName("role")]
        public string Role { get; set; }

        [JsonIgnore]
        public string? Content { get; set; }

        [JsonIgnore]
        public IList<MessageContent>? Contents { get; set; }

        // Summary: The contents of the message.
        [JsonPropertyName("content")]
        public object ContentCalculated
        {
            get
            {
                if (Content != null && Contents != null)
                {
                    throw new ValidationException("Content and Contents can not be assigned at the same time. One of them must be null.");
                }

                if (Content != null)
                {
                    return Content;
                }

                return Contents;
            }
            set
            {
                Content = value?.ToString();
            }
        }

        // Summary: The name of the author of this message. May contain a-z, A-Z, 0-9, and
        // underscores, with a maximum length of 64 characters.
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        // Summary: Required for tool role messages. Tool call that this message is responding to.
        [JsonPropertyName("tool_call_id")]
        public string? ToolCallId { get; set; }

        // Summary: Deprecated and replaced by tool_calls. The name and arguments of a function that
        // should be called, as generated by the model.
        [JsonPropertyName("function_call")]
        public FunctionCall? FunctionCall { get; set; }

        // Summary: The tool calls generated by the model, such as function calls.
        [JsonPropertyName("tool_calls")]
        public IList<ToolCall>? ToolCalls { get; set; }

        // Add a new property to identify the model or agent
        public string ModelIdentifier { get; set; }

        public SynthetIQ_ChatMessage()
        {
        }

        public SynthetIQ_ChatMessage(string role, string content, string modelIdentifier, string name = null, IList<ToolCall>? toolCalls = null, string? toolCallId = null)
        {
            Role = role;
            Content = content;
            ModelIdentifier = modelIdentifier; // Assign the new property
            Name = name;
            ToolCalls = toolCalls;
            ToolCallId = toolCallId;
        }

        public SynthetIQ_ChatMessage(string role, IList<MessageContent> contents, string modelIdentifier)
        {
            Role = role;
            Contents = contents;
            ModelIdentifier = modelIdentifier;
        }

        public static SynthetIQ_ChatMessage FromAssistant(string content, string modelIdentifier, string name = null, IList<ToolCall>? toolCalls = null)
        {
            return new SynthetIQ_ChatMessage(StaticValues.ChatMessageRoles.Assistant, content, modelIdentifier, name, toolCalls);
        }

        public static SynthetIQ_ChatMessage FromTool(string content, string toolCallId)
        {
            return new SynthetIQ_ChatMessage(StaticValues.ChatMessageRoles.Tool, content, null, null, null, toolCallId);
        }

        public static SynthetIQ_ChatMessage FromUser(string content, string? name = null)
        {
            return new SynthetIQ_ChatMessage(StaticValues.ChatMessageRoles.User, content, name);
        }

        public static SynthetIQ_ChatMessage FromSystem(string content, string modelIdentifier, string? name = null)
        {
            return new SynthetIQ_ChatMessage(StaticValues.ChatMessageRoles.System, content, modelIdentifier, name);
        }

        public static SynthetIQ_ChatMessage FromUser(IList<MessageContent> contents, string modelIdentifier)
        {
            return new SynthetIQ_ChatMessage(StaticValues.ChatMessageRoles.User, contents, modelIdentifier);
        }
    }
}